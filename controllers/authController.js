const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const validator = require('validator');
const { createUser, findUserByEmail } = require('../models/userModel');
const db = require('../db/connection');

// POST /register
const registerUser = async (req, res) => {
    const { name, email, password, phone, shift } = req.body;
  
    // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !email || !password) {
      return res.status(400).json({ msg: 'Name, email, and password are required.' });
    }
  
    // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ email
    if (!validator.isEmail(email)) {
      return res.status(422).json({ msg: 'Invalid email format.' });
    }
  
    try {
      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUser = await findUserByEmail(email);
      if (existingUser) {
        return res.status(409).json({ msg: 'User with this email already exists.' });
      }
  
      // 4. –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
      const hashedPassword = await bcrypt.hash(password, 10);
  
      let managerId = null;
  
      // 5. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ —Å–º–µ–Ω–µ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ shift)
      if (shift) {
        const managerResult = await db.query(
          `SELECT id FROM users WHERE role = 'manager' AND shift = $1 LIMIT 1;`,
          [shift]
        );
        if (managerResult.rows.length > 0) {
          managerId = managerResult.rows[0].id;
        }
      }
  
      // 6. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
      const newUser = await createUser({
        name,
        email,
        password: hashedPassword,
        phone,
        shift,
        managerId
      });
  
      // 7. –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
      res.status(201).json({
        msg: 'User registered successfully. Awaiting approval.',
        user: {
          id: newUser.id,
          name: newUser.name,
          email: newUser.email,
          shift: newUser.shift,
          role: newUser.role,
          isApproved: newUser.is_approved,
          assignedManagerId: newUser.manager_id || null
        }
      });
  
    } catch (error) {
    console.error('‚ùå Registration error:', error);
    res.status(500).json({
      msg: 'An error occurred while trying to register the user. Please try again later.',
      error: error.message  // üëà –≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–≤–æ–¥–∏–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    });
    //   catch (error) {
    //     console.error('‚ùå Error during user registration:', error);

    //     res.status(500).json({
    //       msg: 'An error occurred while trying to register the user. Please try again later.'
    //     });
    //   }
  }

};

// POST /api/login
// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const loginUser = async (req, res) => {
    const { email, password } = req.body; // –ø–æ–ª—É—á–∞–µ–º email –∏ –ø–∞—Ä–æ–ª—å –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
  
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!email || !password)
      return res.status(400).json({ msg: 'Email and password are required.' });
  
    try {
      // 2. –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ: –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º–∏ email –∏ password, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω
      const result = await db.query(
        'SELECT * FROM users WHERE email = $1',
        [email]
      );
  
      const user = result.rows[0]; // –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
  
      // 3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω
      if (!user || !user.is_approved) {
        return res.status(401).json({ msg: 'Invalid credentials or account not approved.' });
      }

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        return res.status(401).json({ msg: 'Invalid credentials or account not approved.' });
      }
  
      // 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT-—Ç–æ–∫–µ–Ω–∞
      const token = jwt.sign(
        {
          id: user.id,
          email: user.email,
          role: user.role
        },
        process.env.JWT_SECRET, // —Å–µ–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        { expiresIn: '30d' } // —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 30 –¥–Ω–µ–π
      );
  
      // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ —Ç–æ–∫–µ–Ω–∞
      res.status(200).json({
        msg: 'Login successful.',
        token // –∫–ª–∏–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç —Ç–æ–∫–µ–Ω –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      });
  
    } catch (error) {
      // 7. –õ–æ–≤–∏–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
      console.error('Login error:', error);
      res.status(500).json({ msg: 'Internal server error' });
    }
  };
  

module.exports = { registerUser, loginUser };